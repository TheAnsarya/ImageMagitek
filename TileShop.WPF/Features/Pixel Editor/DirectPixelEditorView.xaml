<UserControl
    x:Class="TileShop.WPF.Views.DirectPixelEditorView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="clr-namespace:TileShop.WPF.Behaviors"
    xmlns:colorpicker="clr-namespace:ColorPicker;assembly=TileShop.WPF.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dd="urn:gong-wpf-dragdrop"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:model="clr-namespace:TileShop.WPF.Models"
    xmlns:s="https://github.com/canton7/Stylet"
    xmlns:ui="http://schemas.modernwpf.com/2019"
    xmlns:vm="clr-namespace:TileShop.WPF.ViewModels"
    d:DataContext="{d:DesignInstance Type=vm:DirectPixelEditorViewModel}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <UserControl.InputBindings>
        <KeyBinding Key="Z" Command="{s:Action ZoomIn}" />
        <KeyBinding Key="X" Command="{s:Action ZoomOut}" />
        <KeyBinding Key="G" Command="{s:Action ToggleGridlineVisibility}" />
        <KeyBinding Key="Escape" Command="{s:Action CancelOverlay}" />
        <KeyBinding Key="Return" Command="{s:Action ConfirmPendingOperation}" />
        <KeyBinding
            Key="S"
            Command="{s:Action SaveChanges}"
            Modifiers="Ctrl" />
        <KeyBinding
            Key="Z"
            Command="{s:Action Undo}"
            Modifiers="Ctrl" />
        <KeyBinding
            Key="Y"
            Command="{s:Action Redo}"
            Modifiers="Ctrl" />
        <MouseBinding Gesture="{x:Static behaviors:MouseWheelGesture.CtrlScrollDown}" Command="{s:Action ZoomOut}" />
        <MouseBinding Gesture="{x:Static behaviors:MouseWheelGesture.CtrlScrollUp}" Command="{s:Action ZoomIn}" />
    </UserControl.InputBindings>
    <i:Interaction.Behaviors>
        <behaviors:BubbleMouseWheelEventsBehaviour />
    </i:Interaction.Behaviors>

    <Grid x:Name="pixelEditor" UseLayoutRounding="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!--  Toolbar  -->
        <StackPanel Grid.ColumnSpan="2" Orientation="Horizontal">
            <StackPanel Margin="10,0,10,0">
                <TextBlock HorizontalAlignment="Center" Text="Zoom" />
                <Slider
                    MinWidth="100"
                    Maximum="{Binding MaxZoom}"
                    Minimum="{Binding MinZoom}"
                    ToolTip="Zoom (Z, X)"
                    Value="{Binding Zoom}" />
            </StackPanel>

            <StackPanel VerticalAlignment="Center">
                <TextBlock HorizontalAlignment="Center" Text="Grid" />
                <ToggleButton
                    Focusable="False"
                    IsChecked="{Binding ShowGridlines}"
                    Style="{StaticResource toolBarToggleButtonStyle}"
                    ToolTip="Toggle gridline visibility (G)">
                    <Image Style="{StaticResource iconGrid}" />
                </ToggleButton>
            </StackPanel>

            <Border
                Margin="5,6,5,4"
                BorderBrush="{DynamicResource separatorBrush}"
                BorderThickness="1" />

            <!--  Tools  -->
            <StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Tools" />

                <StackPanel Orientation="Horizontal">
                    <RadioButton
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center"
                        GroupName="Tools"
                        IsChecked="{Binding ActiveTool, Mode=TwoWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Select}"
                        Style="{StaticResource toolBarToggleButtonStyle}"
                        ToolTip="Select Tool">
                        <Image Style="{StaticResource iconCursor}" />
                    </RadioButton>
                    <RadioButton
                        HorizontalContentAlignment="Center"
                        VerticalContentAlignment="Center"
                        GroupName="Tools"
                        IsChecked="{Binding ActiveTool, Mode=TwoWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Pencil}"
                        Style="{StaticResource toolBarToggleButtonStyle}"
                        ToolTip="Pencil Tool">
                        <Image Style="{StaticResource iconPencil}" />
                    </RadioButton>
                    <RadioButton
                        GroupName="Tools"
                        IsChecked="{Binding ActiveTool, Mode=TwoWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=ColorPicker}"
                        Style="{StaticResource toolBarToggleButtonStyle}"
                        ToolTip="Color Picker Tool">
                        <Image Style="{StaticResource iconColorPicker}" />
                    </RadioButton>
                    <RadioButton
                        GroupName="Tools"
                        IsChecked="{Binding ActiveTool, Mode=TwoWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=FloodFill}"
                        Style="{StaticResource toolBarToggleButtonStyle}"
                        ToolTip="Flood Fill Tool">
                        <Image Style="{StaticResource iconFloodFill}" />
                    </RadioButton>
                </StackPanel>
            </StackPanel>

            <StackPanel>
                <TextBlock HorizontalAlignment="Center" Text="Active Colors" />
                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                    <Button Padding="0" Background="Transparent">
                        <Button.Content>
                            <Border BorderBrush="Black" BorderThickness="2">
                                <Border BorderBrush="White" BorderThickness="2">
                                    <Rectangle
                                        Width="26"
                                        Height="26"
                                        ToolTip="Primary Color">
                                        <Rectangle.Fill>
                                            <SolidColorBrush Color="{Binding PrimaryColor, Converter={StaticResource ColorRgba32ToMediaColorConverter}}" />
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Border>
                            </Border>
                        </Button.Content>
                        <ui:FlyoutService.Flyout>
                            <ui:Flyout>
                                <!--<colorpicker:StandardColorPicker SecondaryColor="{Binding SecondaryColor, Converter={StaticResource ColorRgba32ToMediaColorConverter}, Mode=TwoWay}" SelectedColor="{Binding PrimaryColor, Converter={StaticResource ColorRgba32ToMediaColorConverter}, Mode=TwoWay}" />-->
                                <colorpicker:DirectColorPicker SelectedColor="{Binding PrimaryColor, Converter={StaticResource ColorRgba32ToMediaColorConverter}, Mode=TwoWay}" />
                            </ui:Flyout>
                        </ui:FlyoutService.Flyout>
                    </Button>

                    <Button Padding="0" Background="Transparent">
                        <Button.Content>
                            <Border BorderBrush="Black" BorderThickness="2">
                                <Border BorderBrush="White" BorderThickness="2">
                                    <Rectangle
                                        Width="26"
                                        Height="26"
                                        ToolTip="Secondary Color">
                                        <Rectangle.Fill>
                                            <SolidColorBrush Color="{Binding SecondaryColor, Converter={StaticResource ColorRgba32ToMediaColorConverter}}" />
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Border>
                            </Border>
                        </Button.Content>
                        <ui:FlyoutService.Flyout>
                            <ui:Flyout>
                                <colorpicker:DirectColorPicker SelectedColor="{Binding SecondaryColor, Converter={StaticResource ColorRgba32ToMediaColorConverter}, Mode=TwoWay}" />
                            </ui:Flyout>
                        </ui:FlyoutService.Flyout>
                    </Button>
                </StackPanel>
            </StackPanel>
        </StackPanel>

        <!--  Image Display  -->
        <ScrollViewer
            Grid.Row="2"
            Grid.Column="0"
            Grid.ColumnSpan="2"
            HorizontalScrollBarVisibility="Auto"
            VerticalScrollBarVisibility="Auto">
            <i:Interaction.Behaviors>
                <behaviors:CaptureCtrlWheelMouseBehavior Proxy="{Binding}" />
            </i:Interaction.Behaviors>

            <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <Grid.Resources>
                    <ScaleTransform x:Key="transform" ScaleX="{Binding Zoom}" ScaleY="{Binding Zoom}" />
                </Grid.Resources>

                <i:Interaction.Behaviors>
                    <behaviors:MouseCaptureBehavior Proxy="{Binding}" ShouldCaptureMouseWheel="False" />
                </i:Interaction.Behaviors>

                <!--  Editable Image  -->
                <Image
                    Panel.ZIndex="1"
                    dd:DragDrop.DropHandler="{Binding}"
                    dd:DragDrop.IsDropTarget="True"
                    LayoutTransform="{StaticResource transform}"
                    RenderOptions.BitmapScalingMode="NearestNeighbor"
                    SnapsToDevicePixels="True"
                    Source="{Binding BitmapAdapter.Bitmap}"
                    Stretch="None" />

                <!--  Checkered Background  -->
                <Rectangle
                    Panel.ZIndex="0"
                    Fill="{StaticResource CheckeredBrush}"
                    LayoutTransform="{StaticResource transform}" />

                <!--  Selection and Paste Overlay  -->
                <Canvas
                    x:Name="overlayCanvas"
                    MaxWidth="{Binding BitmapAdapter.Width}"
                    MaxHeight="{Binding BitmapAdapter.Height}"
                    Panel.ZIndex="2"
                    dd:DragDrop.DragHandler="{Binding}"
                    dd:DragDrop.DropHandler="{Binding}"
                    dd:DragDrop.IsDragSource="True"
                    dd:DragDrop.IsDropTarget="True"
                    ClipToBounds="True"
                    LayoutTransform="{StaticResource transform}">

                    <Rectangle
                        Canvas.Left="{Binding Selection.SelectionRect.SnappedLeft}"
                        Canvas.Top="{Binding Selection.SelectionRect.SnappedTop}"
                        Width="{Binding Selection.SelectionRect.SnappedWidth}"
                        Height="{Binding Selection.SelectionRect.SnappedHeight}"
                        ClipToBounds="False"
                        Fill="{StaticResource editSelectionFillBrush}"
                        SnapsToDevicePixels="True"
                        Stroke="Black"
                        StrokeDashArray="3 2"
                        StrokeThickness="1"
                        Visibility="{Binding Selection.HasSelection, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />

                    <Rectangle
                        Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
                        Canvas.Top="{Binding Paste.Rect.SnappedTop}"
                        Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
                        Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
                        Panel.ZIndex="4"
                        Fill="{StaticResource editSelectionFillBrush}"
                        IsHitTestVisible="False"
                        SnapsToDevicePixels="True"
                        Stroke="Black"
                        StrokeDashArray="3 2"
                        StrokeThickness="1" />

                    <Image
                        Canvas.Left="{Binding Paste.Rect.SnappedLeft}"
                        Canvas.Top="{Binding Paste.Rect.SnappedTop}"
                        Width="{Binding Paste.Rect.SnappedWidth, FallbackValue=0}"
                        Height="{Binding Paste.Rect.SnappedHeight, FallbackValue=0}"
                        RenderOptions.BitmapScalingMode="NearestNeighbor"
                        SnapsToDevicePixels="True"
                        Source="{Binding Paste.OverlayImage.Bitmap}"
                        Stretch="None" />
                </Canvas>

                <!--  Gridline Overlay  -->
                <ItemsControl
                    Grid.Row="0"
                    Grid.Column="0"
                    Panel.ZIndex="5"
                    IsHitTestVisible="False"
                    ItemsSource="{Binding Gridlines}"
                    Visibility="{Binding ShowGridlines, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Hidden}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type model:Gridline}">
                            <Line
                                RenderOptions.EdgeMode="Aliased"
                                SnapsToDevicePixels="True"
                                Stroke="{DynamicResource gridLineBrush}"
                                StrokeThickness="1"
                                UseLayoutRounding="True"
                                X1="{Binding X1}"
                                X2="{Binding X2}"
                                Y1="{Binding Y1}"
                                Y2="{Binding Y2}">
                                <Line.LayoutTransform>
                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                </Line.LayoutTransform>
                            </Line>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>

            </Grid>
        </ScrollViewer>
    </Grid>
</UserControl>
